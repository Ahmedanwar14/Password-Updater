
Password_UpdaterApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e8  00800060  000023ea  0000247e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800248  00800248  00002666  2**0
                  ALLOC
  3 .stab         00001ff8  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000be6  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005246  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005386  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000054f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000713f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000802a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000091c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 35       	cpi	r26, 0x5B	; 91
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 0c 	call	0x1892	; 0x1892 <main>
      8a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Eeprom_VidInit>:
#include "Eeprom_INT.h"
#include "Eeprom_Cfg.h"
#include "Eeprom_Priv.h"

void Eeprom_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Intialize I2c*/
	I2c_VidInit();
     b4e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <I2c_VidInit>
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <Eeprom_u8WriteByte>:

u8 Eeprom_u8WriteByte(u8 DeviceId, u16 Location, u8 Byte)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <Eeprom_u8WriteByte+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <Eeprom_u8WriteByte+0x8>
     b60:	00 d0       	rcall	.+0      	; 0xb62 <Eeprom_u8WriteByte+0xa>
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	8a 83       	std	Y+2, r24	; 0x02
     b68:	7c 83       	std	Y+4, r23	; 0x04
     b6a:	6b 83       	std	Y+3, r22	; 0x03
     b6c:	4d 83       	std	Y+5, r20	; 0x05
	 * 8- Check status
	 * 9- Send Stop
	 *
	 ***********************************************/
	 u8 SLA;
	 if(DeviceId==0)
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	88 23       	and	r24, r24
     b72:	41 f4       	brne	.+16     	; 0xb84 <Eeprom_u8WriteByte+0x2c>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_0 | ((Location>>8)<<1);
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	89 2f       	mov	r24, r25
     b7a:	99 27       	eor	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	80 6a       	ori	r24, 0xA0	; 160
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	0a c0       	rjmp	.+20     	; 0xb98 <Eeprom_u8WriteByte+0x40>

	 }
	 else if(DeviceId==1)
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	39 f4       	brne	.+14     	; 0xb98 <Eeprom_u8WriteByte+0x40>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_1 | ((Location>>8)<<1);
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	89 2f       	mov	r24, r25
     b90:	99 27       	eor	r25, r25
     b92:	88 0f       	add	r24, r24
     b94:	8b 6a       	ori	r24, 0xAB	; 171
     b96:	89 83       	std	Y+1, r24	; 0x01
	 }

	 	 I2c_VidSendStart();
     b98:	0e 94 86 06 	call	0xd0c	; 0xd0c <I2c_VidSendStart>
	 	 if(I2c_u8CheckStatus(0x08)==1)
     b9c:	88 e0       	ldi	r24, 0x08	; 8
     b9e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	e9 f4       	brne	.+58     	; 0xbe0 <Eeprom_u8WriteByte+0x88>
	 	 {
	 		 I2c_VidSendSlaveAddress(SLA);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	0e 94 a1 06 	call	0xd42	; 0xd42 <I2c_VidSendSlaveAddress>

	 		if(I2c_u8CheckStatus(0x18)==1)
     bac:	88 e1       	ldi	r24, 0x18	; 24
     bae:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	a9 f4       	brne	.+42     	; 0xbe0 <Eeprom_u8WriteByte+0x88>
	 		{
	 			I2c_VidSendData((u8)Location);//CAsting u16 values fa hya5od least 8 bits
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	0e 94 b8 06 	call	0xd70	; 0xd70 <I2c_VidSendData>

	 			if(I2c_u8CheckStatus(0x28)==1)
     bbc:	88 e2       	ldi	r24, 0x28	; 40
     bbe:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	69 f4       	brne	.+26     	; 0xbe0 <Eeprom_u8WriteByte+0x88>
	 			{
	 				I2c_VidSendData(Byte);
     bc6:	8d 81       	ldd	r24, Y+5	; 0x05
     bc8:	0e 94 b8 06 	call	0xd70	; 0xd70 <I2c_VidSendData>

	 				if(I2c_u8CheckStatus(0x28)==1)
     bcc:	88 e2       	ldi	r24, 0x28	; 40
     bce:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <Eeprom_u8WriteByte+0x88>
	 				{
	 					I2c_VidSendStop();
     bd6:	0e 94 96 06 	call	0xd2c	; 0xd2c <I2c_VidSendStop>
	 					return 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	8e 83       	std	Y+6, r24	; 0x06
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <Eeprom_u8WriteByte+0x8a>
	 				}
	 			}
	 		}
	 	 }

return 0;
     be0:	1e 82       	std	Y+6, r1	; 0x06
     be2:	8e 81       	ldd	r24, Y+6	; 0x06
}
     be4:	26 96       	adiw	r28, 0x06	; 6
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <Eeprom_u8ReadByte>:



u8 Eeprom_u8ReadByte(u8 DeviceId, u16 Location, u8* pByte)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	27 97       	sbiw	r28, 0x07	; 7
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	8a 83       	std	Y+2, r24	; 0x02
     c0c:	7c 83       	std	Y+4, r23	; 0x04
     c0e:	6b 83       	std	Y+3, r22	; 0x03
     c10:	5e 83       	std	Y+6, r21	; 0x06
     c12:	4d 83       	std	Y+5, r20	; 0x05
		 * 11-Read the recevied byte
		 * 13- Send Stop
		 *
		 ***********************************************/
	 u8 SLA;
	 if(DeviceId==0)
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	88 23       	and	r24, r24
     c18:	41 f4       	brne	.+16     	; 0xc2a <Eeprom_u8ReadByte+0x34>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_0 | ((Location>>8)<<1);
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	89 2f       	mov	r24, r25
     c20:	99 27       	eor	r25, r25
     c22:	88 0f       	add	r24, r24
     c24:	80 6a       	ori	r24, 0xA0	; 160
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <Eeprom_u8ReadByte+0x48>

	 }
	 else if(DeviceId==1)
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	39 f4       	brne	.+14     	; 0xc3e <Eeprom_u8ReadByte+0x48>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_1 | ((Location>>8)<<1);
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	89 2f       	mov	r24, r25
     c36:	99 27       	eor	r25, r25
     c38:	88 0f       	add	r24, r24
     c3a:	8b 6a       	ori	r24, 0xAB	; 171
     c3c:	89 83       	std	Y+1, r24	; 0x01
	 }

	 	 I2c_VidSendStart();
     c3e:	0e 94 86 06 	call	0xd0c	; 0xd0c <I2c_VidSendStart>
	 	 if(I2c_u8CheckStatus(0x08)==1)
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	51 f5       	brne	.+84     	; 0xca0 <Eeprom_u8ReadByte+0xaa>
	 	 {
	 		 I2c_VidSendSlaveAddress(SLA);
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	0e 94 a1 06 	call	0xd42	; 0xd42 <I2c_VidSendSlaveAddress>

	 		if(I2c_u8CheckStatus(0x18)==1)
     c52:	88 e1       	ldi	r24, 0x18	; 24
     c54:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	11 f5       	brne	.+68     	; 0xca0 <Eeprom_u8ReadByte+0xaa>
	 		{
	 			I2c_VidSendData((u8)Location);//Casting u16 values fa hya5od least 8 bits
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	0e 94 b8 06 	call	0xd70	; 0xd70 <I2c_VidSendData>

	 			if(I2c_u8CheckStatus(0x28)==1)
     c62:	88 e2       	ldi	r24, 0x28	; 40
     c64:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	d1 f4       	brne	.+52     	; 0xca0 <Eeprom_u8ReadByte+0xaa>
	 			{
	 				I2c_VidSendStart();
     c6c:	0e 94 86 06 	call	0xd0c	; 0xd0c <I2c_VidSendStart>

	 				if(I2c_u8CheckStatus(0x10)==1)
     c70:	80 e1       	ldi	r24, 0x10	; 16
     c72:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	99 f4       	brne	.+38     	; 0xca0 <Eeprom_u8ReadByte+0xaa>
	 				{
	 					I2c_VidSendSlaveAddress(SLA | 0x01);//Set Slave address to do Read Operation
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	0e 94 a1 06 	call	0xd42	; 0xd42 <I2c_VidSendSlaveAddress>

	 					if(I2c_u8CheckStatus(0x40)==1)
     c82:	80 e4       	ldi	r24, 0x40	; 64
     c84:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <I2c_u8CheckStatus>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	51 f4       	brne	.+20     	; 0xca0 <Eeprom_u8ReadByte+0xaa>
	 					{
	 						*pByte=I2c_u8ReceiveData();
     c8c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <I2c_u8ReceiveData>
     c90:	ed 81       	ldd	r30, Y+5	; 0x05
     c92:	fe 81       	ldd	r31, Y+6	; 0x06
     c94:	80 83       	st	Z, r24
	 						I2c_VidSendStop();
     c96:	0e 94 96 06 	call	0xd2c	; 0xd2c <I2c_VidSendStop>
	 						return 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	8f 83       	std	Y+7, r24	; 0x07
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <Eeprom_u8ReadByte+0xac>
	 				}
	 			}
	 		}
	 	 }

	 	 return 0;
     ca0:	1f 82       	std	Y+7, r1	; 0x07
     ca2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     ca4:	27 96       	adiw	r28, 0x07	; 7
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <I2c_VidInit>:
#include "I2C_Cfg.h"
#include "I2c_Priv.h"


void I2c_VidInit(void)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	/*Enable I2c*/
	SET_BIT(TWCR_reg,TWEN);
     cbe:	a6 e5       	ldi	r26, 0x56	; 86
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e6 e5       	ldi	r30, 0x56	; 86
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	84 60       	ori	r24, 0x04	; 4
     cca:	8c 93       	st	X, r24

	/*Enable REceiver acknowledge*/
	SET_BIT(TWCR_reg,TWEA);
     ccc:	a6 e5       	ldi	r26, 0x56	; 86
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e6 e5       	ldi	r30, 0x56	; 86
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 64       	ori	r24, 0x40	; 64
     cd8:	8c 93       	st	X, r24

	/*SCL=Fcpu/(16+(2xTWBRx4^TWPS))=250 khz*/
	TWBR_reg=2;
     cda:	e0 e2       	ldi	r30, 0x20	; 32
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	80 83       	st	Z, r24
	CLR_BIT(TWSR_reg,1);
     ce2:	a1 e2       	ldi	r26, 0x21	; 33
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e2       	ldi	r30, 0x21	; 33
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	8c 93       	st	X, r24
	CLR_BIT(TWSR_reg,0);
     cf0:	a1 e2       	ldi	r26, 0x21	; 33
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e1 e2       	ldi	r30, 0x21	; 33
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8e 7f       	andi	r24, 0xFE	; 254
     cfc:	8c 93       	st	X, r24

	/* Device's Own address = 1 and disable General call*/
	TWAR_reg=2; //0b00000010
     cfe:	e2 e2       	ldi	r30, 0x22	; 34
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	80 83       	st	Z, r24


}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <I2c_VidSendStart>:

void I2c_VidSendStart(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	/*Send Start Condition & Clear flag*/
	TWCR_reg= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     d14:	e6 e5       	ldi	r30, 0x56	; 86
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	84 ea       	ldi	r24, 0xA4	; 164
     d1a:	80 83       	st	Z, r24

	/*wait till this job done*/
	while(GET_BIT(TWCR_reg,7)==0);
     d1c:	e6 e5       	ldi	r30, 0x56	; 86
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 23       	and	r24, r24
     d24:	dc f7       	brge	.-10     	; 0xd1c <I2c_VidSendStart+0x10>

}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <I2c_VidSendStop>:

void I2c_VidSendStop(void)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62

	/*Send Stop Condition & Clear flag*/
		TWCR_reg= (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     d34:	e6 e5       	ldi	r30, 0x56	; 86
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	84 e9       	ldi	r24, 0x94	; 148
     d3a:	80 83       	st	Z, r24

}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <I2c_VidSendSlaveAddress>:
void I2c_VidSendSlaveAddress(u8 SlaveAddress_W_R)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	89 83       	std	Y+1, r24	; 0x01
	/*Load Slave Address in TWDR*/
	TWDR_reg=SlaveAddress_W_R;
     d4e:	e3 e2       	ldi	r30, 0x23	; 35
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	80 83       	st	Z, r24

	/*Clear flag to start the next job*/
	TWCR_reg= (1<<TWINT) | (1<<TWEN);
     d56:	e6 e5       	ldi	r30, 0x56	; 86
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	84 e8       	ldi	r24, 0x84	; 132
     d5c:	80 83       	st	Z, r24

	/*wait till this job done*/
		while(GET_BIT(TWCR_reg,7)==0);
     d5e:	e6 e5       	ldi	r30, 0x56	; 86
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 23       	and	r24, r24
     d66:	dc f7       	brge	.-10     	; 0xd5e <I2c_VidSendSlaveAddress+0x1c>
}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <I2c_VidSendData>:

void I2c_VidSendData(u8 Data)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	/*Load Data in TWDR*/
		TWDR_reg=Data;
     d7c:	e3 e2       	ldi	r30, 0x23	; 35
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	80 83       	st	Z, r24

		/*Clear flag to start the next job*/
		TWCR_reg= (1<<TWINT) | (1<<TWEN);
     d84:	e6 e5       	ldi	r30, 0x56	; 86
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	84 e8       	ldi	r24, 0x84	; 132
     d8a:	80 83       	st	Z, r24

		/*wait till this job done*/
		while(GET_BIT(TWCR_reg,7)==0);
     d8c:	e6 e5       	ldi	r30, 0x56	; 86
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	88 23       	and	r24, r24
     d94:	dc f7       	brge	.-10     	; 0xd8c <I2c_VidSendData+0x1c>
}
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <I2c_u8ReceiveData>:
u8 I2c_u8ReceiveData(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62

	/*Clear flag to start the next job*/
		TWCR_reg= (1<<TWINT) | (1<<TWEN);
     da6:	e6 e5       	ldi	r30, 0x56	; 86
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	84 e8       	ldi	r24, 0x84	; 132
     dac:	80 83       	st	Z, r24

	/*wait till this job done*/
		while(GET_BIT(TWCR_reg,7)==0);
     dae:	e6 e5       	ldi	r30, 0x56	; 86
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 23       	and	r24, r24
     db6:	dc f7       	brge	.-10     	; 0xdae <I2c_u8ReceiveData+0x10>

	/*Return the received data*/
		return TWDR_reg;
     db8:	e3 e2       	ldi	r30, 0x23	; 35
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z

}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <I2c_u8CheckStatus>:

u8 I2c_u8CheckStatus(u8 ExpectedStatus)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <I2c_u8CheckStatus+0x6>
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	89 83       	std	Y+1, r24	; 0x01
	if(ExpectedStatus == (TWSR_reg & 0xF8))
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	e1 e2       	ldi	r30, 0x21	; 33
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 7f       	andi	r24, 0xF8	; 248
     de2:	90 70       	andi	r25, 0x00	; 0
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	19 f4       	brne	.+6      	; 0xdf0 <I2c_u8CheckStatus+0x2c>
	{
		return 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <I2c_u8CheckStatus+0x2e>
	}
	else
	{
		return 0;
     df0:	1a 82       	std	Y+2, r1	; 0x02
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <New_Pass_Update>:
#include "UART_INT.h"
#include "Eeprom_INT.h"
#include "Pass_Updater_PRIV.h"

void New_Pass_Update(u8 New_Pass[4],u8 Conf_Pass[4])
{
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	a2 97       	sbiw	r28, 0x22	; 34
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	98 a3       	std	Y+32, r25	; 0x20
     e18:	8f 8f       	std	Y+31, r24	; 0x1f
     e1a:	7a a3       	std	Y+34, r23	; 0x22
     e1c:	69 a3       	std	Y+33, r22	; 0x21
					Uart_u8SendString("Please Enter Your New Password AAA");
     e1e:	80 e6       	ldi	r24, 0x60	; 96
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
					for(u8 i=0 ; i<4 ; i++)
     e26:	1e 8e       	std	Y+30, r1	; 0x1e
     e28:	92 c0       	rjmp	.+292    	; 0xf4e <New_Pass_Update+0x150>
					{
						New_Pass[i]=Uart_u8ReceiveByte();
     e2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e32:	98 a1       	ldd	r25, Y+32	; 0x20
     e34:	8c 01       	movw	r16, r24
     e36:	02 0f       	add	r16, r18
     e38:	13 1f       	adc	r17, r19
     e3a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Uart_u8ReceiveByte>
     e3e:	f8 01       	movw	r30, r16
     e40:	80 83       	st	Z, r24
						Uart_vidSendByte(New_Pass[i]);
     e42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e4a:	98 a1       	ldd	r25, Y+32	; 0x20
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
						Uart_vidSendByte('\r');
     e58:	8d e0       	ldi	r24, 0x0D	; 13
     e5a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
						Uart_vidSendByte('\n');
     e5e:	8a e0       	ldi	r24, 0x0A	; 10
     e60:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e2       	ldi	r26, 0x20	; 32
     e6a:	b1 e4       	ldi	r27, 0x41	; 65
     e6c:	89 8f       	std	Y+25, r24	; 0x19
     e6e:	9a 8f       	std	Y+26, r25	; 0x1a
     e70:	ab 8f       	std	Y+27, r26	; 0x1b
     e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e74:	69 8d       	ldd	r22, Y+25	; 0x19
     e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a ef       	ldi	r20, 0xFA	; 250
     e82:	54 e4       	ldi	r21, 0x44	; 68
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	8d 8b       	std	Y+21, r24	; 0x15
     e8e:	9e 8b       	std	Y+22, r25	; 0x16
     e90:	af 8b       	std	Y+23, r26	; 0x17
     e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e94:	6d 89       	ldd	r22, Y+21	; 0x15
     e96:	7e 89       	ldd	r23, Y+22	; 0x16
     e98:	8f 89       	ldd	r24, Y+23	; 0x17
     e9a:	98 8d       	ldd	r25, Y+24	; 0x18
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e8       	ldi	r20, 0x80	; 128
     ea2:	5f e3       	ldi	r21, 0x3F	; 63
     ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea8:	88 23       	and	r24, r24
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <New_Pass_Update+0xb8>
		__ticks = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9c 8b       	std	Y+20, r25	; 0x14
     eb2:	8b 8b       	std	Y+19, r24	; 0x13
     eb4:	3f c0       	rjmp	.+126    	; 0xf34 <New_Pass_Update+0x136>
	else if (__tmp > 65535)
     eb6:	6d 89       	ldd	r22, Y+21	; 0x15
     eb8:	7e 89       	ldd	r23, Y+22	; 0x16
     eba:	8f 89       	ldd	r24, Y+23	; 0x17
     ebc:	98 8d       	ldd	r25, Y+24	; 0x18
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	57 e4       	ldi	r21, 0x47	; 71
     ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eca:	18 16       	cp	r1, r24
     ecc:	4c f5       	brge	.+82     	; 0xf20 <New_Pass_Update+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ece:	69 8d       	ldd	r22, Y+25	; 0x19
     ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e2       	ldi	r20, 0x20	; 32
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	9c 8b       	std	Y+20, r25	; 0x14
     ef4:	8b 8b       	std	Y+19, r24	; 0x13
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <New_Pass_Update+0x118>
     ef8:	88 ec       	ldi	r24, 0xC8	; 200
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9a 8b       	std	Y+18, r25	; 0x12
     efe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f00:	89 89       	ldd	r24, Y+17	; 0x11
     f02:	9a 89       	ldd	r25, Y+18	; 0x12
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <New_Pass_Update+0x106>
     f08:	9a 8b       	std	Y+18, r25	; 0x12
     f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0c:	8b 89       	ldd	r24, Y+19	; 0x13
     f0e:	9c 89       	ldd	r25, Y+20	; 0x14
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	9c 8b       	std	Y+20, r25	; 0x14
     f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	9c 89       	ldd	r25, Y+20	; 0x14
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	69 f7       	brne	.-38     	; 0xef8 <New_Pass_Update+0xfa>
     f1e:	14 c0       	rjmp	.+40     	; 0xf48 <New_Pass_Update+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f20:	6d 89       	ldd	r22, Y+21	; 0x15
     f22:	7e 89       	ldd	r23, Y+22	; 0x16
     f24:	8f 89       	ldd	r24, Y+23	; 0x17
     f26:	98 8d       	ldd	r25, Y+24	; 0x18
     f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9c 8b       	std	Y+20, r25	; 0x14
     f32:	8b 8b       	std	Y+19, r24	; 0x13
     f34:	8b 89       	ldd	r24, Y+19	; 0x13
     f36:	9c 89       	ldd	r25, Y+20	; 0x14
     f38:	98 8b       	std	Y+16, r25	; 0x10
     f3a:	8f 87       	std	Y+15, r24	; 0x0f
     f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3e:	98 89       	ldd	r25, Y+16	; 0x10
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <New_Pass_Update+0x142>
     f44:	98 8b       	std	Y+16, r25	; 0x10
     f46:	8f 87       	std	Y+15, r24	; 0x0f
#include "Pass_Updater_PRIV.h"

void New_Pass_Update(u8 New_Pass[4],u8 Conf_Pass[4])
{
					Uart_u8SendString("Please Enter Your New Password AAA");
					for(u8 i=0 ; i<4 ; i++)
     f48:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	8e 8f       	std	Y+30, r24	; 0x1e
     f4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	08 f4       	brcc	.+2      	; 0xf56 <New_Pass_Update+0x158>
     f54:	6a cf       	rjmp	.-300    	; 0xe2a <New_Pass_Update+0x2c>
						Uart_vidSendByte(New_Pass[i]);
						Uart_vidSendByte('\r');
						Uart_vidSendByte('\n');
						_delay_ms(10);
					}
					Uart_u8SendString("Please Re-Enter Your New PAssword BBB");
     f56:	83 e8       	ldi	r24, 0x83	; 131
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
					for(u8 i=0 ; i<4 ; i++)
     f5e:	1d 8e       	std	Y+29, r1	; 0x1d
     f60:	92 c0       	rjmp	.+292    	; 0x1086 <New_Pass_Update+0x288>
					{
						Conf_Pass[i]=Uart_u8ReceiveByte();
     f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	89 a1       	ldd	r24, Y+33	; 0x21
     f6a:	9a a1       	ldd	r25, Y+34	; 0x22
     f6c:	8c 01       	movw	r16, r24
     f6e:	02 0f       	add	r16, r18
     f70:	13 1f       	adc	r17, r19
     f72:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Uart_u8ReceiveByte>
     f76:	f8 01       	movw	r30, r16
     f78:	80 83       	st	Z, r24
						Uart_vidSendByte(Conf_Pass[i]);
     f7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	89 a1       	ldd	r24, Y+33	; 0x21
     f82:	9a a1       	ldd	r25, Y+34	; 0x22
     f84:	fc 01       	movw	r30, r24
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	80 81       	ld	r24, Z
     f8c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
												Uart_vidSendByte('\r');
     f90:	8d e0       	ldi	r24, 0x0D	; 13
     f92:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
												Uart_vidSendByte('\n');
     f96:	8a e0       	ldi	r24, 0x0A	; 10
     f98:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e2       	ldi	r26, 0x20	; 32
     fa2:	b1 e4       	ldi	r27, 0x41	; 65
     fa4:	8b 87       	std	Y+11, r24	; 0x0b
     fa6:	9c 87       	std	Y+12, r25	; 0x0c
     fa8:	ad 87       	std	Y+13, r26	; 0x0d
     faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4a ef       	ldi	r20, 0xFA	; 250
     fba:	54 e4       	ldi	r21, 0x44	; 68
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	8f 83       	std	Y+7, r24	; 0x07
     fc6:	98 87       	std	Y+8, r25	; 0x08
     fc8:	a9 87       	std	Y+9, r26	; 0x09
     fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <New_Pass_Update+0x1f0>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	3f c0       	rjmp	.+126    	; 0x106c <New_Pass_Update+0x26e>
	else if (__tmp > 65535)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	3f ef       	ldi	r19, 0xFF	; 255
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	57 e4       	ldi	r21, 0x47	; 71
     ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1002:	18 16       	cp	r1, r24
    1004:	4c f5       	brge	.+82     	; 0x1058 <New_Pass_Update+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e2       	ldi	r20, 0x20	; 32
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	0f c0       	rjmp	.+30     	; 0x104e <New_Pass_Update+0x250>
    1030:	88 ec       	ldi	r24, 0xC8	; 200
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <New_Pass_Update+0x23e>
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f7       	brne	.-38     	; 0x1030 <New_Pass_Update+0x232>
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <New_Pass_Update+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <New_Pass_Update+0x27a>
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
						Uart_vidSendByte('\r');
						Uart_vidSendByte('\n');
						_delay_ms(10);
					}
					Uart_u8SendString("Please Re-Enter Your New PAssword BBB");
					for(u8 i=0 ; i<4 ; i++)
    1080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	8d 8f       	std	Y+29, r24	; 0x1d
    1086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	08 f4       	brcc	.+2      	; 0x108e <New_Pass_Update+0x290>
    108c:	6a cf       	rjmp	.-300    	; 0xf62 <New_Pass_Update+0x164>
												Uart_vidSendByte('\r');
												Uart_vidSendByte('\n');
						_delay_ms(10);
					}

}
    108e:	a2 96       	adiw	r28, 0x22	; 34
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <Entered_Pass>:

void Entered_Pass(u8 Entered_Pass[4])
{
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <Entered_Pass+0xa>
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	Uart_u8SendString("Please Enter Your Password....");
    10b8:	89 ea       	ldi	r24, 0xA9	; 169
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
						for(u8 i=0 ; i<4 ; i++)
    10c0:	19 82       	std	Y+1, r1	; 0x01
    10c2:	20 c0       	rjmp	.+64     	; 0x1104 <Entered_Pass+0x60>
						{
							Entered_Pass[i]=Uart_u8ReceiveByte();
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	8c 01       	movw	r16, r24
    10d0:	02 0f       	add	r16, r18
    10d2:	13 1f       	adc	r17, r19
    10d4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Uart_u8ReceiveByte>
    10d8:	f8 01       	movw	r30, r16
    10da:	80 83       	st	Z, r24
							Uart_vidSendByte(Entered_Pass[i]);
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	80 81       	ld	r24, Z
    10ee:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
													Uart_vidSendByte('\r');
    10f2:	8d e0       	ldi	r24, 0x0D	; 13
    10f4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
													Uart_vidSendByte('\n');
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
    10fa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
}

void Entered_Pass(u8 Entered_Pass[4])
{
	Uart_u8SendString("Please Enter Your Password....");
						for(u8 i=0 ; i<4 ; i++)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	e8 f2       	brcs	.-70     	; 0x10c4 <Entered_Pass+0x20>
							Entered_Pass[i]=Uart_u8ReceiveByte();
							Uart_vidSendByte(Entered_Pass[i]);
													Uart_vidSendByte('\r');
													Uart_vidSendByte('\n');
						}
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <u8Compare_Pass>:
u8 u8Compare_Pass(u8 Old_Pass[4],u8 New_Pass[4])
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	27 97       	sbiw	r28, 0x07	; 7
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	9d 83       	std	Y+5, r25	; 0x05
    1130:	8c 83       	std	Y+4, r24	; 0x04
    1132:	7f 83       	std	Y+7, r23	; 0x07
    1134:	6e 83       	std	Y+6, r22	; 0x06
	u8 Count=0;
    1136:	1b 82       	std	Y+3, r1	; 0x03
	u8 Flag;
	for(u8 i=0 ; i<4 ; i++)
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	2b c0       	rjmp	.+86     	; 0x1192 <u8Compare_Pass+0x78>
		{

		if(Old_Pass[i]==New_Pass[i])
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	fc 01       	movw	r30, r24
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19
    114c:	40 81       	ld	r20, Z
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	9f 81       	ldd	r25, Y+7	; 0x07
    1158:	fc 01       	movw	r30, r24
    115a:	e2 0f       	add	r30, r18
    115c:	f3 1f       	adc	r31, r19
    115e:	80 81       	ld	r24, Z
    1160:	48 17       	cp	r20, r24
    1162:	a1 f4       	brne	.+40     	; 0x118c <u8Compare_Pass+0x72>
			{
				Count++;
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	8b 83       	std	Y+3, r24	; 0x03
				Uart_vidSendByte(Old_Pass[i]);
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	fc 01       	movw	r30, r24
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	80 81       	ld	r24, Z
    117c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
				Uart_vidSendByte('\r');
    1180:	8d e0       	ldi	r24, 0x0D	; 13
    1182:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
				Uart_vidSendByte('\n');
    1186:	8a e0       	ldi	r24, 0x0A	; 10
    1188:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
}
u8 u8Compare_Pass(u8 Old_Pass[4],u8 New_Pass[4])
{
	u8 Count=0;
	u8 Flag;
	for(u8 i=0 ; i<4 ; i++)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	84 30       	cpi	r24, 0x04	; 4
    1196:	90 f2       	brcs	.-92     	; 0x113c <u8Compare_Pass+0x22>
				Uart_vidSendByte('\r');
				Uart_vidSendByte('\n');
			}

		}
	if(Count==4)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	19 f4       	brne	.+6      	; 0x11a4 <u8Compare_Pass+0x8a>
	{
		Flag=1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	8a 83       	std	Y+2, r24	; 0x02
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <u8Compare_Pass+0x8c>
	}
	else
	{
		Flag=0;
    11a4:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Flag;
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    11a8:	27 96       	adiw	r28, 0x07	; 7
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <Get_Pass_From_Eeprom>:
void Get_Pass_From_Eeprom(u8 u8Get_Pass_from_Eeprom[4])
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	ae 97       	sbiw	r28, 0x2e	; 46
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	9e a7       	std	Y+46, r25	; 0x2e
    11d0:	8d a7       	std	Y+45, r24	; 0x2d
	Uart_u8SendString("Now i'm geeting your PAssword from EEProm");
    11d2:	88 ec       	ldi	r24, 0xC8	; 200
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
	Uart_vidSendByte('\r');
    11da:	8d e0       	ldi	r24, 0x0D	; 13
    11dc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
	Uart_vidSendByte('\n');
    11e0:	8a e0       	ldi	r24, 0x0A	; 10
    11e2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
	u8 Received_data;
	for(u8 i=0;i<4;i++)
    11e6:	1b a6       	std	Y+43, r1	; 0x2b
    11e8:	89 c1       	rjmp	.+786    	; 0x14fc <Get_Pass_From_Eeprom+0x342>
	{
		Eeprom_u8ReadByte(0,(i+Pass_Location_start),&Received_data);
    11ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	44 96       	adiw	r24, 0x14	; 20
    11f2:	9c 01       	movw	r18, r24
    11f4:	ae 01       	movw	r20, r28
    11f6:	44 5d       	subi	r20, 0xD4	; 212
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	b9 01       	movw	r22, r18
    11fe:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Eeprom_u8ReadByte>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e2       	ldi	r26, 0x20	; 32
    1208:	b1 e4       	ldi	r27, 0x41	; 65
    120a:	8f a3       	std	Y+39, r24	; 0x27
    120c:	98 a7       	std	Y+40, r25	; 0x28
    120e:	a9 a7       	std	Y+41, r26	; 0x29
    1210:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1212:	6f a1       	ldd	r22, Y+39	; 0x27
    1214:	78 a5       	ldd	r23, Y+40	; 0x28
    1216:	89 a5       	ldd	r24, Y+41	; 0x29
    1218:	9a a5       	ldd	r25, Y+42	; 0x2a
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a ef       	ldi	r20, 0xFA	; 250
    1220:	54 e4       	ldi	r21, 0x44	; 68
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	8b a3       	std	Y+35, r24	; 0x23
    122c:	9c a3       	std	Y+36, r25	; 0x24
    122e:	ad a3       	std	Y+37, r26	; 0x25
    1230:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1232:	6b a1       	ldd	r22, Y+35	; 0x23
    1234:	7c a1       	ldd	r23, Y+36	; 0x24
    1236:	8d a1       	ldd	r24, Y+37	; 0x25
    1238:	9e a1       	ldd	r25, Y+38	; 0x26
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1246:	88 23       	and	r24, r24
    1248:	2c f4       	brge	.+10     	; 0x1254 <Get_Pass_From_Eeprom+0x9a>
		__ticks = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9a a3       	std	Y+34, r25	; 0x22
    1250:	89 a3       	std	Y+33, r24	; 0x21
    1252:	3f c0       	rjmp	.+126    	; 0x12d2 <Get_Pass_From_Eeprom+0x118>
	else if (__tmp > 65535)
    1254:	6b a1       	ldd	r22, Y+35	; 0x23
    1256:	7c a1       	ldd	r23, Y+36	; 0x24
    1258:	8d a1       	ldd	r24, Y+37	; 0x25
    125a:	9e a1       	ldd	r25, Y+38	; 0x26
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1268:	18 16       	cp	r1, r24
    126a:	4c f5       	brge	.+82     	; 0x12be <Get_Pass_From_Eeprom+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	6f a1       	ldd	r22, Y+39	; 0x27
    126e:	78 a5       	ldd	r23, Y+40	; 0x28
    1270:	89 a5       	ldd	r24, Y+41	; 0x29
    1272:	9a a5       	ldd	r25, Y+42	; 0x2a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9a a3       	std	Y+34, r25	; 0x22
    1292:	89 a3       	std	Y+33, r24	; 0x21
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <Get_Pass_From_Eeprom+0xfa>
    1296:	88 ec       	ldi	r24, 0xC8	; 200
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	98 a3       	std	Y+32, r25	; 0x20
    129c:	8f 8f       	std	Y+31, r24	; 0x1f
    129e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a0:	98 a1       	ldd	r25, Y+32	; 0x20
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <Get_Pass_From_Eeprom+0xe8>
    12a6:	98 a3       	std	Y+32, r25	; 0x20
    12a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12aa:	89 a1       	ldd	r24, Y+33	; 0x21
    12ac:	9a a1       	ldd	r25, Y+34	; 0x22
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b4:	89 a1       	ldd	r24, Y+33	; 0x21
    12b6:	9a a1       	ldd	r25, Y+34	; 0x22
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	69 f7       	brne	.-38     	; 0x1296 <Get_Pass_From_Eeprom+0xdc>
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <Get_Pass_From_Eeprom+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12be:	6b a1       	ldd	r22, Y+35	; 0x23
    12c0:	7c a1       	ldd	r23, Y+36	; 0x24
    12c2:	8d a1       	ldd	r24, Y+37	; 0x25
    12c4:	9e a1       	ldd	r25, Y+38	; 0x26
    12c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9a a3       	std	Y+34, r25	; 0x22
    12d0:	89 a3       	std	Y+33, r24	; 0x21
    12d2:	89 a1       	ldd	r24, Y+33	; 0x21
    12d4:	9a a1       	ldd	r25, Y+34	; 0x22
    12d6:	9e 8f       	std	Y+30, r25	; 0x1e
    12d8:	8d 8f       	std	Y+29, r24	; 0x1d
    12da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <Get_Pass_From_Eeprom+0x124>
    12e2:	9e 8f       	std	Y+30, r25	; 0x1e
    12e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
			u8Get_Pass_from_Eeprom[i]=Received_data;
    12e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    12f0:	fc 01       	movw	r30, r24
    12f2:	e2 0f       	add	r30, r18
    12f4:	f3 1f       	adc	r31, r19
    12f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    12f8:	80 83       	st	Z, r24
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e2       	ldi	r26, 0x20	; 32
    1300:	b1 e4       	ldi	r27, 0x41	; 65
    1302:	89 8f       	std	Y+25, r24	; 0x19
    1304:	9a 8f       	std	Y+26, r25	; 0x1a
    1306:	ab 8f       	std	Y+27, r26	; 0x1b
    1308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130a:	69 8d       	ldd	r22, Y+25	; 0x19
    130c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4a ef       	ldi	r20, 0xFA	; 250
    1318:	54 e4       	ldi	r21, 0x44	; 68
    131a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	8d 8b       	std	Y+21, r24	; 0x15
    1324:	9e 8b       	std	Y+22, r25	; 0x16
    1326:	af 8b       	std	Y+23, r26	; 0x17
    1328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e8       	ldi	r20, 0x80	; 128
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133e:	88 23       	and	r24, r24
    1340:	2c f4       	brge	.+10     	; 0x134c <Get_Pass_From_Eeprom+0x192>
		__ticks = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <Get_Pass_From_Eeprom+0x210>
	else if (__tmp > 65535)
    134c:	6d 89       	ldd	r22, Y+21	; 0x15
    134e:	7e 89       	ldd	r23, Y+22	; 0x16
    1350:	8f 89       	ldd	r24, Y+23	; 0x17
    1352:	98 8d       	ldd	r25, Y+24	; 0x18
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	57 e4       	ldi	r21, 0x47	; 71
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	4c f5       	brge	.+82     	; 0x13b6 <Get_Pass_From_Eeprom+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1364:	69 8d       	ldd	r22, Y+25	; 0x19
    1366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e2       	ldi	r20, 0x20	; 32
    1372:	51 e4       	ldi	r21, 0x41	; 65
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <Get_Pass_From_Eeprom+0x1f2>
    138e:	88 ec       	ldi	r24, 0xC8	; 200
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9a 8b       	std	Y+18, r25	; 0x12
    1394:	89 8b       	std	Y+17, r24	; 0x11
    1396:	89 89       	ldd	r24, Y+17	; 0x11
    1398:	9a 89       	ldd	r25, Y+18	; 0x12
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <Get_Pass_From_Eeprom+0x1e0>
    139e:	9a 8b       	std	Y+18, r25	; 0x12
    13a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
    13aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	69 f7       	brne	.-38     	; 0x138e <Get_Pass_From_Eeprom+0x1d4>
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <Get_Pass_From_Eeprom+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b6:	6d 89       	ldd	r22, Y+21	; 0x15
    13b8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ba:	8f 89       	ldd	r24, Y+23	; 0x17
    13bc:	98 8d       	ldd	r25, Y+24	; 0x18
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	98 8b       	std	Y+16, r25	; 0x10
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
    13d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d4:	98 89       	ldd	r25, Y+16	; 0x10
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <Get_Pass_From_Eeprom+0x21c>
    13da:	98 8b       	std	Y+16, r25	; 0x10
    13dc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			Uart_vidSendByte(u8Get_Pass_from_Eeprom[i]);
    13de:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e8:	fc 01       	movw	r30, r24
    13ea:	e2 0f       	add	r30, r18
    13ec:	f3 1f       	adc	r31, r19
    13ee:	80 81       	ld	r24, Z
    13f0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
			Uart_vidSendByte('\r');
    13f4:	8d e0       	ldi	r24, 0x0D	; 13
    13f6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
			Uart_vidSendByte('\n');
    13fa:	8a e0       	ldi	r24, 0x0A	; 10
    13fc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
			Uart_vidSendByte(Received_data);
    1400:	8c a5       	ldd	r24, Y+44	; 0x2c
    1402:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
			Uart_vidSendByte('\r');
    1406:	8d e0       	ldi	r24, 0x0D	; 13
    1408:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
			Uart_vidSendByte('\n');
    140c:	8a e0       	ldi	r24, 0x0A	; 10
    140e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e2       	ldi	r26, 0x20	; 32
    1418:	b1 e4       	ldi	r27, 0x41	; 65
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <Get_Pass_From_Eeprom+0x2aa>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <Get_Pass_From_Eeprom+0x328>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <Get_Pass_From_Eeprom+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <Get_Pass_From_Eeprom+0x30a>
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <Get_Pass_From_Eeprom+0x2f8>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <Get_Pass_From_Eeprom+0x2ec>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <Get_Pass_From_Eeprom+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <Get_Pass_From_Eeprom+0x334>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
{
	Uart_u8SendString("Now i'm geeting your PAssword from EEProm");
	Uart_vidSendByte('\r');
	Uart_vidSendByte('\n');
	u8 Received_data;
	for(u8 i=0;i<4;i++)
    14f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	8b a7       	std	Y+43, r24	; 0x2b
    14fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	08 f4       	brcc	.+2      	; 0x1504 <Get_Pass_From_Eeprom+0x34a>
    1502:	73 ce       	rjmp	.-794    	; 0x11ea <Get_Pass_From_Eeprom+0x30>
			_delay_ms(10);
	}



}
    1504:	ae 96       	adiw	r28, 0x2e	; 46
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <Update_Pass>:

void Update_Pass(u8 New_Password[4])
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	a0 97       	sbiw	r28, 0x20	; 32
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	98 a3       	std	Y+32, r25	; 0x20
    152c:	8f 8f       	std	Y+31, r24	; 0x1f

						for(u8 i=0;i<4;i++)
    152e:	1e 8e       	std	Y+30, r1	; 0x1e
    1530:	8c c0       	rjmp	.+280    	; 0x164a <Update_Pass+0x134>
							{


								u8 Data=New_Password[i];
    1532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	8f 8d       	ldd	r24, Y+31	; 0x1f
    153a:	98 a1       	ldd	r25, Y+32	; 0x20
    153c:	fc 01       	movw	r30, r24
    153e:	e2 0f       	add	r30, r18
    1540:	f3 1f       	adc	r31, r19
    1542:	80 81       	ld	r24, Z
    1544:	8d 8f       	std	Y+29, r24	; 0x1d
								Eeprom_u8WriteByte(0,i+Pass_Location_start,Data);
    1546:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	44 96       	adiw	r24, 0x14	; 20
    154e:	9c 01       	movw	r18, r24
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	b9 01       	movw	r22, r18
    1554:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1556:	0e 94 ac 05 	call	0xb58	; 0xb58 <Eeprom_u8WriteByte>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e2       	ldi	r26, 0x20	; 32
    1560:	b1 e4       	ldi	r27, 0x41	; 65
    1562:	89 8f       	std	Y+25, r24	; 0x19
    1564:	9a 8f       	std	Y+26, r25	; 0x1a
    1566:	ab 8f       	std	Y+27, r26	; 0x1b
    1568:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	69 8d       	ldd	r22, Y+25	; 0x19
    156c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    156e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a ef       	ldi	r20, 0xFA	; 250
    1578:	54 e4       	ldi	r21, 0x44	; 68
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8d 8b       	std	Y+21, r24	; 0x15
    1584:	9e 8b       	std	Y+22, r25	; 0x16
    1586:	af 8b       	std	Y+23, r26	; 0x17
    1588:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    158a:	6d 89       	ldd	r22, Y+21	; 0x15
    158c:	7e 89       	ldd	r23, Y+22	; 0x16
    158e:	8f 89       	ldd	r24, Y+23	; 0x17
    1590:	98 8d       	ldd	r25, Y+24	; 0x18
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <Update_Pass+0x96>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 8b       	std	Y+20, r25	; 0x14
    15a8:	8b 8b       	std	Y+19, r24	; 0x13
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <Update_Pass+0x114>
	else if (__tmp > 65535)
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <Update_Pass+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	69 8d       	ldd	r22, Y+25	; 0x19
    15c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <Update_Pass+0xf6>
    15ee:	88 ec       	ldi	r24, 0xC8	; 200
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9a 8b       	std	Y+18, r25	; 0x12
    15f4:	89 8b       	std	Y+17, r24	; 0x11
    15f6:	89 89       	ldd	r24, Y+17	; 0x11
    15f8:	9a 89       	ldd	r25, Y+18	; 0x12
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <Update_Pass+0xe4>
    15fe:	9a 8b       	std	Y+18, r25	; 0x12
    1600:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8b 89       	ldd	r24, Y+19	; 0x13
    1604:	9c 89       	ldd	r25, Y+20	; 0x14
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9c 8b       	std	Y+20, r25	; 0x14
    160a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <Update_Pass+0xd8>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <Update_Pass+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9c 8b       	std	Y+20, r25	; 0x14
    1628:	8b 8b       	std	Y+19, r24	; 0x13
    162a:	8b 89       	ldd	r24, Y+19	; 0x13
    162c:	9c 89       	ldd	r25, Y+20	; 0x14
    162e:	98 8b       	std	Y+16, r25	; 0x10
    1630:	8f 87       	std	Y+15, r24	; 0x0f
    1632:	8f 85       	ldd	r24, Y+15	; 0x0f
    1634:	98 89       	ldd	r25, Y+16	; 0x10
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <Update_Pass+0x120>
    163a:	98 8b       	std	Y+16, r25	; 0x10
    163c:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(10);
								Uart_vidSendByte(Data);
    163e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1640:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
}

void Update_Pass(u8 New_Password[4])
{

						for(u8 i=0;i<4;i++)
    1644:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	8e 8f       	std	Y+30, r24	; 0x1e
    164a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	08 f4       	brcc	.+2      	; 0x1652 <Update_Pass+0x13c>
    1650:	70 cf       	rjmp	.-288    	; 0x1532 <Update_Pass+0x1c>
								u8 Data=New_Password[i];
								Eeprom_u8WriteByte(0,i+Pass_Location_start,Data);
								_delay_ms(10);
								Uart_vidSendByte(Data);
							}
								Uart_u8SendString("Your Password is Updated Successfully");
    1652:	82 ef       	ldi	r24, 0xF2	; 242
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a8 ec       	ldi	r26, 0xC8	; 200
    1660:	b2 e4       	ldi	r27, 0x42	; 66
    1662:	8b 87       	std	Y+11, r24	; 0x0b
    1664:	9c 87       	std	Y+12, r25	; 0x0c
    1666:	ad 87       	std	Y+13, r26	; 0x0d
    1668:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a ef       	ldi	r20, 0xFA	; 250
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8f 83       	std	Y+7, r24	; 0x07
    1684:	98 87       	std	Y+8, r25	; 0x08
    1686:	a9 87       	std	Y+9, r26	; 0x09
    1688:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168a:	6f 81       	ldd	r22, Y+7	; 0x07
    168c:	78 85       	ldd	r23, Y+8	; 0x08
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <Update_Pass+0x196>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <Update_Pass+0x214>
	else if (__tmp > 65535)
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <Update_Pass+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <Update_Pass+0x1f6>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <Update_Pass+0x1e4>
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <Update_Pass+0x1d8>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <Update_Pass+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6f 81       	ldd	r22, Y+7	; 0x07
    1718:	78 85       	ldd	r23, Y+8	; 0x08
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <Update_Pass+0x220>
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
								_delay_ms(100);
								Eeprom_u8WriteByte(0,Old_Pass_flag_location,'1');
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	60 e1       	ldi	r22, 0x10	; 16
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	41 e3       	ldi	r20, 0x31	; 49
    1746:	0e 94 ac 05 	call	0xb58	; 0xb58 <Eeprom_u8WriteByte>
}
    174a:	a0 96       	adiw	r28, 0x20	; 32
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <Uart_vidInit>:
#include "Uart_int.h"
#include "Uart_priv.h"
#include "Uart_cfg.h"

void Uart_vidInit(void)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
	/* Temporary variable to write UCSRC register */
	u8 Temp_u8UcsrcData;

	/* Clear any rubbish values in the variable */
	Temp_u8UcsrcData = 0;
    1766:	19 82       	std	Y+1, r1	; 0x01

	/* Enable Rx and Tx */
	SET_BIT(UCSRB,4); //Rx
    1768:	aa e2       	ldi	r26, 0x2A	; 42
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ea e2       	ldi	r30, 0x2A	; 42
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 61       	ori	r24, 0x10	; 16
    1774:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3); //Tx
    1776:	aa e2       	ldi	r26, 0x2A	; 42
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ea e2       	ldi	r30, 0x2A	; 42
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 60       	ori	r24, 0x08	; 8
    1782:	8c 93       	st	X, r24

	/* Asynchronous Mode */
	CLR_BIT(Temp_u8UcsrcData,6);
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	8f 7b       	andi	r24, 0xBF	; 191
    1788:	89 83       	std	Y+1, r24	; 0x01

	/* Disable Parity checking */
	CLR_BIT(Temp_u8UcsrcData,5);
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	8f 7d       	andi	r24, 0xDF	; 223
    178e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,4);
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	8f 7e       	andi	r24, 0xEF	; 239
    1794:	89 83       	std	Y+1, r24	; 0x01

	/* Select 1-Bit Stop */
	CLR_BIT(Temp_u8UcsrcData,3);
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	87 7f       	andi	r24, 0xF7	; 247
    179a:	89 83       	std	Y+1, r24	; 0x01

	/* Select 8-Bit Character Size */
	CLR_BIT(UCSRB,2);
    179c:	aa e2       	ldi	r26, 0x2A	; 42
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ea e2       	ldi	r30, 0x2A	; 42
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8b 7f       	andi	r24, 0xFB	; 251
    17a8:	8c 93       	st	X, r24
	SET_BIT(Temp_u8UcsrcData,2);
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	84 60       	ori	r24, 0x04	; 4
    17ae:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,1);
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	89 83       	std	Y+1, r24	; 0x01

	/* Update UCSRC register with Temp Data */
	UCSRC = Temp_u8UcsrcData;
    17b6:	e0 e4       	ldi	r30, 0x40	; 64
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	80 83       	st	Z, r24

	/* Configure "9600" Baudrate */
	CLR_BIT(UCSRA,1);
    17be:	ab e2       	ldi	r26, 0x2B	; 43
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e2       	ldi	r30, 0x2B	; 43
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8d 7f       	andi	r24, 0xFD	; 253
    17ca:	8c 93       	st	X, r24
	UBRRH = 0;
    17cc:	e0 e4       	ldi	r30, 0x40	; 64
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	10 82       	st	Z, r1
	UBRRL = 51;
    17d2:	e9 e2       	ldi	r30, 0x29	; 41
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	83 e3       	ldi	r24, 0x33	; 51
    17d8:	80 83       	st	Z, r24
}
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <Uart_vidSendByte>:

void Uart_vidSendByte(u8 Byte)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
	/* Waiting till UDR register is Empty */
	while(GET_BIT(UCSRA,5) == 0);
    17ee:	eb e2       	ldi	r30, 0x2B	; 43
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	82 95       	swap	r24
    17f6:	86 95       	lsr	r24
    17f8:	87 70       	andi	r24, 0x07	; 7
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	81 70       	andi	r24, 0x01	; 1
    1800:	90 70       	andi	r25, 0x00	; 0
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	a1 f3       	breq	.-24     	; 0x17ee <Uart_vidSendByte+0xc>

	/* Update UDR register with the data needs to be sent */
	UDR = Byte;
    1806:	ec e2       	ldi	r30, 0x2C	; 44
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	80 83       	st	Z, r24
}
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <Uart_u8ReceiveByte>:

u8   Uart_u8ReceiveByte(void)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till RxC flag raise */
	while(GET_BIT(UCSRA,7) == 0);
    181e:	eb e2       	ldi	r30, 0x2B	; 43
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 23       	and	r24, r24
    1826:	dc f7       	brge	.-10     	; 0x181e <Uart_u8ReceiveByte+0x8>

	/* Return the received Byte */
	return UDR;
    1828:	ec e2       	ldi	r30, 0x2C	; 44
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <Uart_u8SendString>:


void Uart_u8SendString(char Pu8Data[])
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <Uart_u8SendString+0x6>
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9b 83       	std	Y+3, r25	; 0x03
    1842:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8LoopCtr=0;
    1844:	19 82       	std	Y+1, r1	; 0x01
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <Uart_u8SendString+0x30>
	while(Pu8Data[u8LoopCtr]!=0x00)//fakt l gomla dy *(Pu8DAta+u8loopctr) da nzakr pointer aw c ya man b2a
	{
		Uart_vidSendByte(Pu8Data[u8LoopCtr]);
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	fc 01       	movw	r30, r24
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	80 81       	ld	r24, Z
    185a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
		u8LoopCtr++;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	89 83       	std	Y+1, r24	; 0x01


void Uart_u8SendString(char Pu8Data[])
{
	u8 u8LoopCtr=0;
	while(Pu8Data[u8LoopCtr]!=0x00)//fakt l gomla dy *(Pu8DAta+u8loopctr) da nzakr pointer aw c ya man b2a
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	fc 01       	movw	r30, r24
    1870:	e2 0f       	add	r30, r18
    1872:	f3 1f       	adc	r31, r19
    1874:	80 81       	ld	r24, Z
    1876:	88 23       	and	r24, r24
    1878:	39 f7       	brne	.-50     	; 0x1848 <Uart_u8SendString+0x14>
	{
		Uart_vidSendByte(Pu8Data[u8LoopCtr]);
		u8LoopCtr++;

	}
	Uart_vidSendByte('\r');
    187a:	8d e0       	ldi	r24, 0x0D	; 13
    187c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
	Uart_vidSendByte('\n');
    1880:	8a e0       	ldi	r24, 0x0A	; 10
    1882:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Uart_vidSendByte>
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <main>:
u8 Confirmation_Pass[4];
u8 Old_Pass_flag;
	u8 Rec_Data_Uart;
	u8 Comp_Flag;
void main()
{
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	c2 57       	subi	r28, 0x72	; 114
    18a0:	d0 40       	sbci	r29, 0x00	; 0
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61

	Uart_vidInit();
    18ac:	0e 94 ae 0b 	call	0x175c	; 0x175c <Uart_vidInit>
	Eeprom_VidInit();
    18b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Eeprom_VidInit>


	Uart_u8SendString("Welcome to Password Updater 1");
    18b4:	88 e1       	ldi	r24, 0x18	; 24
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    18bc:	fe 01       	movw	r30, r28
    18be:	e3 59       	subi	r30, 0x93	; 147
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a8 ec       	ldi	r26, 0xC8	; 200
    18c8:	b2 e4       	ldi	r27, 0x42	; 66
    18ca:	80 83       	st	Z, r24
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	a2 83       	std	Z+2, r26	; 0x02
    18d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	8e 01       	movw	r16, r28
    18d4:	07 59       	subi	r16, 0x97	; 151
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	fe 01       	movw	r30, r28
    18da:	e3 59       	subi	r30, 0x93	; 147
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a ef       	ldi	r20, 0xFA	; 250
    18ec:	54 e4       	ldi	r21, 0x44	; 68
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	f8 01       	movw	r30, r16
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1900:	fe 01       	movw	r30, r28
    1902:	e7 59       	subi	r30, 0x97	; 151
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191a:	88 23       	and	r24, r24
    191c:	44 f4       	brge	.+16     	; 0x192e <main+0x9c>
		__ticks = 1;
    191e:	fe 01       	movw	r30, r28
    1920:	e9 59       	subi	r30, 0x99	; 153
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	64 c0       	rjmp	.+200    	; 0x19f6 <main+0x164>
	else if (__tmp > 65535)
    192e:	fe 01       	movw	r30, r28
    1930:	e7 59       	subi	r30, 0x97	; 151
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	0c f0       	brlt	.+2      	; 0x194e <main+0xbc>
    194c:	43 c0       	rjmp	.+134    	; 0x19d4 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	fe 01       	movw	r30, r28
    1950:	e3 59       	subi	r30, 0x93	; 147
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8e 01       	movw	r16, r28
    196e:	09 59       	subi	r16, 0x99	; 153
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	f8 01       	movw	r30, r16
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
    1984:	1f c0       	rjmp	.+62     	; 0x19c4 <main+0x132>
    1986:	fe 01       	movw	r30, r28
    1988:	eb 59       	subi	r30, 0x9B	; 155
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	fe 01       	movw	r30, r28
    1996:	eb 59       	subi	r30, 0x9B	; 155
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <main+0x10c>
    19a2:	fe 01       	movw	r30, r28
    19a4:	eb 59       	subi	r30, 0x9B	; 155
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	de 01       	movw	r26, r28
    19ae:	a9 59       	subi	r26, 0x99	; 153
    19b0:	bf 4f       	sbci	r27, 0xFF	; 255
    19b2:	fe 01       	movw	r30, r28
    19b4:	e9 59       	subi	r30, 0x99	; 153
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	11 96       	adiw	r26, 0x01	; 1
    19c0:	9c 93       	st	X, r25
    19c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e9 59       	subi	r30, 0x99	; 153
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	d1 f6       	brne	.-76     	; 0x1986 <main+0xf4>
    19d2:	28 c0       	rjmp	.+80     	; 0x1a24 <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d4:	8e 01       	movw	r16, r28
    19d6:	09 59       	subi	r16, 0x99	; 153
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	fe 01       	movw	r30, r28
    19dc:	e7 59       	subi	r30, 0x97	; 151
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	f8 01       	movw	r30, r16
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
    19f6:	de 01       	movw	r26, r28
    19f8:	ad 59       	subi	r26, 0x9D	; 157
    19fa:	bf 4f       	sbci	r27, 0xFF	; 255
    19fc:	fe 01       	movw	r30, r28
    19fe:	e9 59       	subi	r30, 0x99	; 153
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	11 96       	adiw	r26, 0x01	; 1
    1a08:	9c 93       	st	X, r25
    1a0a:	8e 93       	st	-X, r24
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ed 59       	subi	r30, 0x9D	; 157
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <main+0x184>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 59       	subi	r30, 0x9D	; 157
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
		_delay_ms(100);

		//Eeprom_u8ReadByte(0,16,&Old_Pass_flag);
		Old_Pass_flag=1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	80 93 5a 02 	sts	0x025A, r24
	if(Old_Pass_flag==1)
    1a2a:	80 91 5a 02 	lds	r24, 0x025A
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <main+0x1a2>
    1a32:	ec c3       	rjmp	.+2008   	; 0x220c <main+0x97a>
	{
		Get_Pass_From_Eeprom(Old_Pass_From_Eeprom);// Reading Old PAssword from EEProm
    1a34:	82 e5       	ldi	r24, 0x52	; 82
    1a36:	92 e0       	ldi	r25, 0x02	; 2
    1a38:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Get_Pass_From_Eeprom>

		Uart_u8SendString("please Enter Your Password 2");
    1a3c:	86 e3       	ldi	r24, 0x36	; 54
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    1a44:	fe 01       	movw	r30, r28
    1a46:	e1 5a       	subi	r30, 0xA1	; 161
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a8 ec       	ldi	r26, 0xC8	; 200
    1a50:	b2 e4       	ldi	r27, 0x42	; 66
    1a52:	80 83       	st	Z, r24
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	a2 83       	std	Z+2, r26	; 0x02
    1a58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	05 5a       	subi	r16, 0xA5	; 165
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 5a       	subi	r30, 0xA1	; 161
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	f8 01       	movw	r30, r16
    1a80:	80 83       	st	Z, r24
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	a2 83       	std	Z+2, r26	; 0x02
    1a86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e5 5a       	subi	r30, 0xA5	; 165
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	44 f4       	brge	.+16     	; 0x1ab6 <main+0x224>
		__ticks = 1;
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e7 5a       	subi	r30, 0xA7	; 167
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	64 c0       	rjmp	.+200    	; 0x1b7e <main+0x2ec>
	else if (__tmp > 65535)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e5 5a       	subi	r30, 0xA5	; 165
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <main+0x244>
    1ad4:	43 c0       	rjmp	.+134    	; 0x1b5c <main+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e1 5a       	subi	r30, 0xA1	; 161
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8e 01       	movw	r16, r28
    1af6:	07 5a       	subi	r16, 0xA7	; 167
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	f8 01       	movw	r30, r16
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    1b0c:	1f c0       	rjmp	.+62     	; 0x1b4c <main+0x2ba>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 5a       	subi	r30, 0xA9	; 169
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e9 5a       	subi	r30, 0xA9	; 169
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <main+0x294>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e9 5a       	subi	r30, 0xA9	; 169
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	de 01       	movw	r26, r28
    1b36:	a7 5a       	subi	r26, 0xA7	; 167
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e7 5a       	subi	r30, 0xA7	; 167
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	9c 93       	st	X, r25
    1b4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e7 5a       	subi	r30, 0xA7	; 167
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	d1 f6       	brne	.-76     	; 0x1b0e <main+0x27c>
    1b5a:	27 c0       	rjmp	.+78     	; 0x1baa <main+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	8e 01       	movw	r16, r28
    1b5e:	07 5a       	subi	r16, 0xA7	; 167
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	fe 01       	movw	r30, r28
    1b64:	e5 5a       	subi	r30, 0xA5	; 165
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	f8 01       	movw	r30, r16
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	de 01       	movw	r26, r28
    1b80:	ab 5a       	subi	r26, 0xAB	; 171
    1b82:	bf 4f       	sbci	r27, 0xFF	; 255
    1b84:	fe 01       	movw	r30, r28
    1b86:	e7 5a       	subi	r30, 0xA7	; 167
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	8d 93       	st	X+, r24
    1b90:	9c 93       	st	X, r25
    1b92:	fe 01       	movw	r30, r28
    1b94:	eb 5a       	subi	r30, 0xAB	; 171
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <main+0x30a>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	eb 5a       	subi	r30, 0xAB	; 171
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	80 83       	st	Z, r24
		_delay_ms(100);
		Entered_Pass(Old_Pass_of_User);//the User Enter His Password
    1baa:	8e e4       	ldi	r24, 0x4E	; 78
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 52 08 	call	0x10a4	; 0x10a4 <Entered_Pass>
		Comp_Flag=u8Compare_Pass(Old_Pass_From_Eeprom,Old_Pass_of_User);
    1bb2:	82 e5       	ldi	r24, 0x52	; 82
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	2e e4       	ldi	r18, 0x4E	; 78
    1bb8:	32 e0       	ldi	r19, 0x02	; 2
    1bba:	b9 01       	movw	r22, r18
    1bbc:	0e 94 8d 08 	call	0x111a	; 0x111a <u8Compare_Pass>
    1bc0:	80 93 48 02 	sts	0x0248, r24

		if(Comp_Flag==1)
    1bc4:	80 91 48 02 	lds	r24, 0x0248
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	09 f0       	breq	.+2      	; 0x1bce <main+0x33c>
    1bcc:	6f c2       	rjmp	.+1246   	; 0x20ac <main+0x81a>
		{

					Uart_u8SendString("Do You Want To Update Your Password ? 3");
    1bce:	83 e5       	ldi	r24, 0x53	; 83
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ef 5a       	subi	r30, 0xAF	; 175
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a8 ec       	ldi	r26, 0xC8	; 200
    1be2:	b2 e4       	ldi	r27, 0x42	; 66
    1be4:	80 83       	st	Z, r24
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	a2 83       	std	Z+2, r26	; 0x02
    1bea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	8e 01       	movw	r16, r28
    1bee:	03 5b       	subi	r16, 0xB3	; 179
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	ef 5a       	subi	r30, 0xAF	; 175
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a ef       	ldi	r20, 0xFA	; 250
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	f8 01       	movw	r30, r16
    1c12:	80 83       	st	Z, r24
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	a2 83       	std	Z+2, r26	; 0x02
    1c18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e3 5b       	subi	r30, 0xB3	; 179
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	44 f4       	brge	.+16     	; 0x1c48 <main+0x3b6>
		__ticks = 1;
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e5 5b       	subi	r30, 0xB5	; 181
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	64 c0       	rjmp	.+200    	; 0x1d10 <main+0x47e>
	else if (__tmp > 65535)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e3 5b       	subi	r30, 0xB3	; 179
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <main+0x3d6>
    1c66:	43 c0       	rjmp	.+134    	; 0x1cee <main+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ef 5a       	subi	r30, 0xAF	; 175
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8e 01       	movw	r16, r28
    1c88:	05 5b       	subi	r16, 0xB5	; 181
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	f8 01       	movw	r30, r16
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	1f c0       	rjmp	.+62     	; 0x1cde <main+0x44c>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e7 5b       	subi	r30, 0xB7	; 183
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e7 5b       	subi	r30, 0xB7	; 183
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <main+0x426>
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e7 5b       	subi	r30, 0xB7	; 183
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	de 01       	movw	r26, r28
    1cc8:	a5 5b       	subi	r26, 0xB5	; 181
    1cca:	bf 4f       	sbci	r27, 0xFF	; 255
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e5 5b       	subi	r30, 0xB5	; 181
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	9c 93       	st	X, r25
    1cdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e5 5b       	subi	r30, 0xB5	; 181
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	d1 f6       	brne	.-76     	; 0x1ca0 <main+0x40e>
    1cec:	27 c0       	rjmp	.+78     	; 0x1d3c <main+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	8e 01       	movw	r16, r28
    1cf0:	05 5b       	subi	r16, 0xB5	; 181
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e3 5b       	subi	r30, 0xB3	; 179
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	de 01       	movw	r26, r28
    1d12:	a9 5b       	subi	r26, 0xB9	; 185
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e5 5b       	subi	r30, 0xB5	; 181
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	8d 93       	st	X+, r24
    1d22:	9c 93       	st	X, r25
    1d24:	fe 01       	movw	r30, r28
    1d26:	e9 5b       	subi	r30, 0xB9	; 185
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <main+0x49c>
    1d32:	fe 01       	movw	r30, r28
    1d34:	e9 5b       	subi	r30, 0xB9	; 185
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
					_delay_ms(100);
					Uart_u8SendString("Press Y or N 4");
    1d3c:	8b e7       	ldi	r24, 0x7B	; 123
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    1d44:	fe 01       	movw	r30, r28
    1d46:	ed 5b       	subi	r30, 0xBD	; 189
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a8 ec       	ldi	r26, 0xC8	; 200
    1d50:	b2 e4       	ldi	r27, 0x42	; 66
    1d52:	80 83       	st	Z, r24
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	a2 83       	std	Z+2, r26	; 0x02
    1d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	8e 01       	movw	r16, r28
    1d5c:	01 5c       	subi	r16, 0xC1	; 193
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5b       	subi	r30, 0xBD	; 189
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a ef       	ldi	r20, 0xFA	; 250
    1d74:	54 e4       	ldi	r21, 0x44	; 68
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	f8 01       	movw	r30, r16
    1d80:	80 83       	st	Z, r24
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	a2 83       	std	Z+2, r26	; 0x02
    1d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ff 96       	adiw	r30, 0x3f	; 63
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <main+0x51c>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9e af       	std	Y+62, r25	; 0x3e
    1daa:	8d af       	std	Y+61, r24	; 0x3d
    1dac:	46 c0       	rjmp	.+140    	; 0x1e3a <main+0x5a8>
	else if (__tmp > 65535)
    1dae:	fe 01       	movw	r30, r28
    1db0:	ff 96       	adiw	r30, 0x3f	; 63
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	64 f5       	brge	.+88     	; 0x1e22 <main+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ed 5b       	subi	r30, 0xBD	; 189
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9e af       	std	Y+62, r25	; 0x3e
    1df6:	8d af       	std	Y+61, r24	; 0x3d
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <main+0x586>
    1dfa:	88 ec       	ldi	r24, 0xC8	; 200
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9c af       	std	Y+60, r25	; 0x3c
    1e00:	8b af       	std	Y+59, r24	; 0x3b
    1e02:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e04:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <main+0x574>
    1e0a:	9c af       	std	Y+60, r25	; 0x3c
    1e0c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9e af       	std	Y+62, r25	; 0x3e
    1e16:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <main+0x568>
    1e20:	16 c0       	rjmp	.+44     	; 0x1e4e <main+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	fe 01       	movw	r30, r28
    1e24:	ff 96       	adiw	r30, 0x3f	; 63
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e af       	std	Y+62, r25	; 0x3e
    1e38:	8d af       	std	Y+61, r24	; 0x3d
    1e3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3e:	9a af       	std	Y+58, r25	; 0x3a
    1e40:	89 af       	std	Y+57, r24	; 0x39
    1e42:	89 ad       	ldd	r24, Y+57	; 0x39
    1e44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <main+0x5b4>
    1e4a:	9a af       	std	Y+58, r25	; 0x3a
    1e4c:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(100);
					Rec_Data_Uart=Uart_u8ReceiveByte();
    1e4e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Uart_u8ReceiveByte>
    1e52:	80 93 4d 02 	sts	0x024D, r24
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	aa ef       	ldi	r26, 0xFA	; 250
    1e5c:	b3 e4       	ldi	r27, 0x43	; 67
    1e5e:	8d ab       	std	Y+53, r24	; 0x35
    1e60:	9e ab       	std	Y+54, r25	; 0x36
    1e62:	af ab       	std	Y+55, r26	; 0x37
    1e64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6d a9       	ldd	r22, Y+53	; 0x35
    1e68:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	89 ab       	std	Y+49, r24	; 0x31
    1e80:	9a ab       	std	Y+50, r25	; 0x32
    1e82:	ab ab       	std	Y+51, r26	; 0x33
    1e84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <main+0x616>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	98 ab       	std	Y+48, r25	; 0x30
    1ea4:	8f a7       	std	Y+47, r24	; 0x2f
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <main+0x694>
	else if (__tmp > 65535)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <main+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <main+0x676>
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e a7       	std	Y+46, r25	; 0x2e
    1ef0:	8d a7       	std	Y+45, r24	; 0x2d
    1ef2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <main+0x664>
    1efa:	9e a7       	std	Y+46, r25	; 0x2e
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <main+0x658>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <main+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	69 a9       	ldd	r22, Y+49	; 0x31
    1f14:	7a a9       	ldd	r23, Y+50	; 0x32
    1f16:	8b a9       	ldd	r24, Y+51	; 0x33
    1f18:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	9c a7       	std	Y+44, r25	; 0x2c
    1f2c:	8b a7       	std	Y+43, r24	; 0x2b
    1f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <main+0x6a0>
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);

					if(Rec_Data_Uart=='y')//user send that he want to change his password
    1f3a:	80 91 4d 02 	lds	r24, 0x024D
    1f3e:	89 37       	cpi	r24, 0x79	; 121
    1f40:	c9 f5       	brne	.+114    	; 0x1fb4 <main+0x722>
					{

						New_Pass_Update(New_Pass_Frm_User,Confirmation_Pass);
    1f42:	86 e5       	ldi	r24, 0x56	; 86
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	29 e4       	ldi	r18, 0x49	; 73
    1f48:	32 e0       	ldi	r19, 0x02	; 2
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <New_Pass_Update>

						Comp_Flag = u8Compare_Pass(New_Pass_Frm_User,Confirmation_Pass);
    1f50:	86 e5       	ldi	r24, 0x56	; 86
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	29 e4       	ldi	r18, 0x49	; 73
    1f56:	32 e0       	ldi	r19, 0x02	; 2
    1f58:	b9 01       	movw	r22, r18
    1f5a:	0e 94 8d 08 	call	0x111a	; 0x111a <u8Compare_Pass>
    1f5e:	80 93 48 02 	sts	0x0248, r24

						if(Comp_Flag==1)
    1f62:	80 91 48 02 	lds	r24, 0x0248
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <main+0x6e2>
						{
							Update_Pass(New_Pass_Frm_User);
    1f6a:	86 e5       	ldi	r24, 0x56	; 86
    1f6c:	92 e0       	ldi	r25, 0x02	; 2
    1f6e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <Update_Pass>
    1f72:	1f c0       	rjmp	.+62     	; 0x1fb2 <main+0x720>
						}

						else if(Comp_Flag==0)
    1f74:	80 91 48 02 	lds	r24, 0x0248
    1f78:	88 23       	and	r24, r24
    1f7a:	d9 f4       	brne	.+54     	; 0x1fb2 <main+0x720>
    1f7c:	10 c0       	rjmp	.+32     	; 0x1f9e <main+0x70c>
						{
								while(Comp_Flag==0)
								{
									New_Pass_Update(New_Pass_Frm_User,Confirmation_Pass);
    1f7e:	86 e5       	ldi	r24, 0x56	; 86
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	29 e4       	ldi	r18, 0x49	; 73
    1f84:	32 e0       	ldi	r19, 0x02	; 2
    1f86:	b9 01       	movw	r22, r18
    1f88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <New_Pass_Update>
									Comp_Flag=u8Compare_Pass(New_Pass_Frm_User,Confirmation_Pass);
    1f8c:	86 e5       	ldi	r24, 0x56	; 86
    1f8e:	92 e0       	ldi	r25, 0x02	; 2
    1f90:	29 e4       	ldi	r18, 0x49	; 73
    1f92:	32 e0       	ldi	r19, 0x02	; 2
    1f94:	b9 01       	movw	r22, r18
    1f96:	0e 94 8d 08 	call	0x111a	; 0x111a <u8Compare_Pass>
    1f9a:	80 93 48 02 	sts	0x0248, r24
							Update_Pass(New_Pass_Frm_User);
						}

						else if(Comp_Flag==0)
						{
								while(Comp_Flag==0)
    1f9e:	80 91 48 02 	lds	r24, 0x0248
    1fa2:	88 23       	and	r24, r24
    1fa4:	61 f3       	breq	.-40     	; 0x1f7e <main+0x6ec>
								{
									New_Pass_Update(New_Pass_Frm_User,Confirmation_Pass);
									Comp_Flag=u8Compare_Pass(New_Pass_Frm_User,Confirmation_Pass);
								}
							Update_Pass(New_Pass_Frm_User);
    1fa6:	86 e5       	ldi	r24, 0x56	; 86
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	0e 94 8b 0a 	call	0x1516	; 0x1516 <Update_Pass>
							Comp_Flag=0;
    1fae:	10 92 48 02 	sts	0x0248, r1
    1fb2:	7b c0       	rjmp	.+246    	; 0x20aa <main+0x818>
						}


				}
			else if(Rec_Data_Uart=='n')
    1fb4:	80 91 4d 02 	lds	r24, 0x024D
    1fb8:	8e 36       	cpi	r24, 0x6E	; 110
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <main+0x72c>
    1fbc:	76 c0       	rjmp	.+236    	; 0x20aa <main+0x818>
					{
						Uart_u8SendString("Thank you for Using Password Updater 7");
    1fbe:	8a e8       	ldi	r24, 0x8A	; 138
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a8 ec       	ldi	r26, 0xC8	; 200
    1fcc:	b2 e4       	ldi	r27, 0x42	; 66
    1fce:	8f a3       	std	Y+39, r24	; 0x27
    1fd0:	98 a7       	std	Y+40, r25	; 0x28
    1fd2:	a9 a7       	std	Y+41, r26	; 0x29
    1fd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fda:	89 a5       	ldd	r24, Y+41	; 0x29
    1fdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a ef       	ldi	r20, 0xFA	; 250
    1fe4:	54 e4       	ldi	r21, 0x44	; 68
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8b a3       	std	Y+35, r24	; 0x23
    1ff0:	9c a3       	std	Y+36, r25	; 0x24
    1ff2:	ad a3       	std	Y+37, r26	; 0x25
    1ff4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <main+0x786>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9a a3       	std	Y+34, r25	; 0x22
    2014:	89 a3       	std	Y+33, r24	; 0x21
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <main+0x804>
	else if (__tmp > 65535)
    2018:	6b a1       	ldd	r22, Y+35	; 0x23
    201a:	7c a1       	ldd	r23, Y+36	; 0x24
    201c:	8d a1       	ldd	r24, Y+37	; 0x25
    201e:	9e a1       	ldd	r25, Y+38	; 0x26
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <main+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	6f a1       	ldd	r22, Y+39	; 0x27
    2032:	78 a5       	ldd	r23, Y+40	; 0x28
    2034:	89 a5       	ldd	r24, Y+41	; 0x29
    2036:	9a a5       	ldd	r25, Y+42	; 0x2a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9a a3       	std	Y+34, r25	; 0x22
    2056:	89 a3       	std	Y+33, r24	; 0x21
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <main+0x7e6>
    205a:	88 ec       	ldi	r24, 0xC8	; 200
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	98 a3       	std	Y+32, r25	; 0x20
    2060:	8f 8f       	std	Y+31, r24	; 0x1f
    2062:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2064:	98 a1       	ldd	r25, Y+32	; 0x20
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <main+0x7d4>
    206a:	98 a3       	std	Y+32, r25	; 0x20
    206c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	89 a1       	ldd	r24, Y+33	; 0x21
    2070:	9a a1       	ldd	r25, Y+34	; 0x22
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9a a3       	std	Y+34, r25	; 0x22
    2076:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	89 a1       	ldd	r24, Y+33	; 0x21
    207a:	9a a1       	ldd	r25, Y+34	; 0x22
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <main+0x7c8>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <main+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6b a1       	ldd	r22, Y+35	; 0x23
    2084:	7c a1       	ldd	r23, Y+36	; 0x24
    2086:	8d a1       	ldd	r24, Y+37	; 0x25
    2088:	9e a1       	ldd	r25, Y+38	; 0x26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
    2096:	89 a1       	ldd	r24, Y+33	; 0x21
    2098:	9a a1       	ldd	r25, Y+34	; 0x22
    209a:	9e 8f       	std	Y+30, r25	; 0x1e
    209c:	8d 8f       	std	Y+29, r24	; 0x1d
    209e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <main+0x810>
    20a6:	9e 8f       	std	Y+30, r25	; 0x1e
    20a8:	8d 8f       	std	Y+29, r24	; 0x1d
    20aa:	af c0       	rjmp	.+350    	; 0x220a <main+0x978>
					}

		}
		else // if the user entered his old password wrong
		{
			u8 Wrong_count=0;
    20ac:	fe 01       	movw	r30, r28
    20ae:	ee 58       	subi	r30, 0x8E	; 142
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	10 82       	st	Z, r1
			for(u8 i=0;i<3;i++)
    20b4:	fe 01       	movw	r30, r28
    20b6:	ef 58       	subi	r30, 0x8F	; 143
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	10 82       	st	Z, r1
    20bc:	23 c0       	rjmp	.+70     	; 0x2104 <main+0x872>
			{
				Entered_Pass(Old_Pass_of_User);
    20be:	8e e4       	ldi	r24, 0x4E	; 78
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <Entered_Pass>

				Comp_Flag = u8Compare_Pass(Old_Pass_From_Eeprom,Old_Pass_of_User);
    20c6:	82 e5       	ldi	r24, 0x52	; 82
    20c8:	92 e0       	ldi	r25, 0x02	; 2
    20ca:	2e e4       	ldi	r18, 0x4E	; 78
    20cc:	32 e0       	ldi	r19, 0x02	; 2
    20ce:	b9 01       	movw	r22, r18
    20d0:	0e 94 8d 08 	call	0x111a	; 0x111a <u8Compare_Pass>
    20d4:	80 93 48 02 	sts	0x0248, r24

				if(Comp_Flag==1)
    20d8:	80 91 48 02 	lds	r24, 0x0248
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	c1 f0       	breq	.+48     	; 0x2110 <main+0x87e>
					break;
				else
					Wrong_count++; // count how many wrong times he entered the wrong password
    20e0:	de 01       	movw	r26, r28
    20e2:	ae 58       	subi	r26, 0x8E	; 142
    20e4:	bf 4f       	sbci	r27, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	ee 58       	subi	r30, 0x8E	; 142
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	8c 93       	st	X, r24

		}
		else // if the user entered his old password wrong
		{
			u8 Wrong_count=0;
			for(u8 i=0;i<3;i++)
    20f2:	de 01       	movw	r26, r28
    20f4:	af 58       	subi	r26, 0x8F	; 143
    20f6:	bf 4f       	sbci	r27, 0xFF	; 255
    20f8:	fe 01       	movw	r30, r28
    20fa:	ef 58       	subi	r30, 0x8F	; 143
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	8c 93       	st	X, r24
    2104:	fe 01       	movw	r30, r28
    2106:	ef 58       	subi	r30, 0x8F	; 143
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	83 30       	cpi	r24, 0x03	; 3
    210e:	b8 f2       	brcs	.-82     	; 0x20be <main+0x82c>
				if(Comp_Flag==1)
					break;
				else
					Wrong_count++; // count how many wrong times he entered the wrong password
			}
			if (Wrong_count==3)
    2110:	fe 01       	movw	r30, r28
    2112:	ee 58       	subi	r30, 0x8E	; 142
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	80 81       	ld	r24, Z
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	09 f0       	breq	.+2      	; 0x211e <main+0x88c>
    211c:	76 c0       	rjmp	.+236    	; 0x220a <main+0x978>
			{
				Uart_u8SendString("Your Account is Blocked Please Enter Admin's Password 10");
    211e:	81 eb       	ldi	r24, 0xB1	; 177
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a8 ec       	ldi	r26, 0xC8	; 200
    212c:	b2 e4       	ldi	r27, 0x42	; 66
    212e:	89 8f       	std	Y+25, r24	; 0x19
    2130:	9a 8f       	std	Y+26, r25	; 0x1a
    2132:	ab 8f       	std	Y+27, r26	; 0x1b
    2134:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a ef       	ldi	r20, 0xFA	; 250
    2144:	54 e4       	ldi	r21, 0x44	; 68
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8d 8b       	std	Y+21, r24	; 0x15
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	af 8b       	std	Y+23, r26	; 0x17
    2154:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <main+0x8e6>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <main+0x964>
	else if (__tmp > 65535)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <main+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <main+0x946>
    21ba:	88 ec       	ldi	r24, 0xC8	; 200
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9a 8b       	std	Y+18, r25	; 0x12
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    21c2:	89 89       	ldd	r24, Y+17	; 0x11
    21c4:	9a 89       	ldd	r25, Y+18	; 0x12
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <main+0x934>
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <main+0x928>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <main+0x978>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	98 8b       	std	Y+16, r25	; 0x10
    21fc:	8f 87       	std	Y+15, r24	; 0x0f
    21fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2200:	98 89       	ldd	r25, Y+16	; 0x10
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <main+0x970>
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f
    220a:	b5 c0       	rjmp	.+362    	; 0x2376 <main+0xae4>
		}

	}
	else
	{
		New_Pass_Update(New_Pass_Frm_User,Confirmation_Pass);
    220c:	86 e5       	ldi	r24, 0x56	; 86
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	29 e4       	ldi	r18, 0x49	; 73
    2212:	32 e0       	ldi	r19, 0x02	; 2
    2214:	b9 01       	movw	r22, r18
    2216:	0e 94 ff 06 	call	0xdfe	; 0xdfe <New_Pass_Update>

		Comp_Flag=u8Compare_Pass(New_Pass_Frm_User,Confirmation_Pass);
    221a:	86 e5       	ldi	r24, 0x56	; 86
    221c:	92 e0       	ldi	r25, 0x02	; 2
    221e:	29 e4       	ldi	r18, 0x49	; 73
    2220:	32 e0       	ldi	r19, 0x02	; 2
    2222:	b9 01       	movw	r22, r18
    2224:	0e 94 8d 08 	call	0x111a	; 0x111a <u8Compare_Pass>
    2228:	80 93 48 02 	sts	0x0248, r24

		if(Comp_Flag==1)
    222c:	80 91 48 02 	lds	r24, 0x0248
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	29 f4       	brne	.+10     	; 0x223e <main+0x9ac>
				{
					Update_Pass(New_Pass_Frm_User);
    2234:	86 e5       	ldi	r24, 0x56	; 86
    2236:	92 e0       	ldi	r25, 0x02	; 2
    2238:	0e 94 8b 0a 	call	0x1516	; 0x1516 <Update_Pass>
    223c:	9c c0       	rjmp	.+312    	; 0x2376 <main+0xae4>
				}
			else if(Comp_Flag==0)
    223e:	80 91 48 02 	lds	r24, 0x0248
    2242:	88 23       	and	r24, r24
    2244:	09 f0       	breq	.+2      	; 0x2248 <main+0x9b6>
    2246:	97 c0       	rjmp	.+302    	; 0x2376 <main+0xae4>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <main+0x9e0>
				{
					while(Comp_Flag==0)
						{
							Uart_u8SendString("You password don't match please write it again");
    224a:	8a ee       	ldi	r24, 0xEA	; 234
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>

							New_Pass_Update(New_Pass_Frm_User,Confirmation_Pass);
    2252:	86 e5       	ldi	r24, 0x56	; 86
    2254:	92 e0       	ldi	r25, 0x02	; 2
    2256:	29 e4       	ldi	r18, 0x49	; 73
    2258:	32 e0       	ldi	r19, 0x02	; 2
    225a:	b9 01       	movw	r22, r18
    225c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <New_Pass_Update>

							Comp_Flag = u8Compare_Pass(New_Pass_Frm_User,Confirmation_Pass);
    2260:	86 e5       	ldi	r24, 0x56	; 86
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	29 e4       	ldi	r18, 0x49	; 73
    2266:	32 e0       	ldi	r19, 0x02	; 2
    2268:	b9 01       	movw	r22, r18
    226a:	0e 94 8d 08 	call	0x111a	; 0x111a <u8Compare_Pass>
    226e:	80 93 48 02 	sts	0x0248, r24
				{
					Update_Pass(New_Pass_Frm_User);
				}
			else if(Comp_Flag==0)
				{
					while(Comp_Flag==0)
    2272:	80 91 48 02 	lds	r24, 0x0248
    2276:	88 23       	and	r24, r24
    2278:	41 f3       	breq	.-48     	; 0x224a <main+0x9b8>

							New_Pass_Update(New_Pass_Frm_User,Confirmation_Pass);

							Comp_Flag = u8Compare_Pass(New_Pass_Frm_User,Confirmation_Pass);
						}
							Uart_u8SendString("Your Password is Updated Successfully");
    227a:	89 e1       	ldi	r24, 0x19	; 25
    227c:	92 e0       	ldi	r25, 0x02	; 2
    227e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Uart_u8SendString>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a8 ec       	ldi	r26, 0xC8	; 200
    2288:	b2 e4       	ldi	r27, 0x42	; 66
    228a:	8b 87       	std	Y+11, r24	; 0x0b
    228c:	9c 87       	std	Y+12, r25	; 0x0c
    228e:	ad 87       	std	Y+13, r26	; 0x0d
    2290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8f 83       	std	Y+7, r24	; 0x07
    22ac:	98 87       	std	Y+8, r25	; 0x08
    22ae:	a9 87       	std	Y+9, r26	; 0x09
    22b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <main+0xa42>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <main+0xac0>
	else if (__tmp > 65535)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <main+0xaac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <main+0xaa2>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 83       	std	Y+4, r25	; 0x04
    231c:	8b 83       	std	Y+3, r24	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <main+0xa90>
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <main+0xa84>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <main+0xad4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <main+0xacc>
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(100);
							Comp_Flag=0;
    2366:	10 92 48 02 	sts	0x0248, r1
							Eeprom_u8WriteByte(0,16,1);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	60 e1       	ldi	r22, 0x10	; 16
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 ac 05 	call	0xb58	; 0xb58 <Eeprom_u8WriteByte>
    2376:	ff cf       	rjmp	.-2      	; 0x2376 <main+0xae4>

00002378 <__prologue_saves__>:
    2378:	2f 92       	push	r2
    237a:	3f 92       	push	r3
    237c:	4f 92       	push	r4
    237e:	5f 92       	push	r5
    2380:	6f 92       	push	r6
    2382:	7f 92       	push	r7
    2384:	8f 92       	push	r8
    2386:	9f 92       	push	r9
    2388:	af 92       	push	r10
    238a:	bf 92       	push	r11
    238c:	cf 92       	push	r12
    238e:	df 92       	push	r13
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	ca 1b       	sub	r28, r26
    23a2:	db 0b       	sbc	r29, r27
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	09 94       	ijmp

000023b0 <__epilogue_restores__>:
    23b0:	2a 88       	ldd	r2, Y+18	; 0x12
    23b2:	39 88       	ldd	r3, Y+17	; 0x11
    23b4:	48 88       	ldd	r4, Y+16	; 0x10
    23b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    23bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    23be:	9b 84       	ldd	r9, Y+11	; 0x0b
    23c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c2:	b9 84       	ldd	r11, Y+9	; 0x09
    23c4:	c8 84       	ldd	r12, Y+8	; 0x08
    23c6:	df 80       	ldd	r13, Y+7	; 0x07
    23c8:	ee 80       	ldd	r14, Y+6	; 0x06
    23ca:	fd 80       	ldd	r15, Y+5	; 0x05
    23cc:	0c 81       	ldd	r16, Y+4	; 0x04
    23ce:	1b 81       	ldd	r17, Y+3	; 0x03
    23d0:	aa 81       	ldd	r26, Y+2	; 0x02
    23d2:	b9 81       	ldd	r27, Y+1	; 0x01
    23d4:	ce 0f       	add	r28, r30
    23d6:	d1 1d       	adc	r29, r1
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	ed 01       	movw	r28, r26
    23e4:	08 95       	ret

000023e6 <_exit>:
    23e6:	f8 94       	cli

000023e8 <__stop_program>:
    23e8:	ff cf       	rjmp	.-2      	; 0x23e8 <__stop_program>
